// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210405140136_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.EFModels.Bend", b =>
                {
                    b.Property<int>("BendID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivBenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisBenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeBenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SatnicaSviranja")
                        .HasColumnType("real");

                    b.HasKey("BendID");

                    b.ToTable("Bendovi");
                });

            modelBuilder.Entity("Data.EFModels.Cvijece", b =>
                {
                    b.Property<int>("CvijeceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaCvijeca")
                        .HasColumnType("real");

                    b.Property<string>("PutanjaDoSlikeCvijeca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipCvijecaID")
                        .HasColumnType("int");

                    b.Property<string>("VrstaCvijeca")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CvijeceID");

                    b.HasIndex("TipCvijecaID");

                    b.ToTable("Cvijece");
                });

            modelBuilder.Entity("Data.EFModels.Dekoracija", b =>
                {
                    b.Property<int>("DekoracijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaDekoracije")
                        .HasColumnType("real");

                    b.Property<string>("PutanjaDoSlikeDekoracije")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipDekoracijeID")
                        .HasColumnType("int");

                    b.Property<string>("VrstaDekoracije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DekoracijaID");

                    b.HasIndex("TipDekoracijeID");

                    b.ToTable("Dekoracije");
                });

            modelBuilder.Entity("Data.EFModels.Evidencija", b =>
                {
                    b.Property<int>("EvidencijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("MeniID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.HasKey("EvidencijaID");

                    b.HasIndex("MeniID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("Evidencije");
                });

            modelBuilder.Entity("Data.EFModels.Fotograf", b =>
                {
                    b.Property<int>("FotografID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FotografijaID")
                        .HasColumnType("int");

                    b.Property<string>("ImeFotografa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrezimeFotografa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeFotografa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SatnicaSlikanja")
                        .HasColumnType("real");

                    b.HasKey("FotografID");

                    b.HasIndex("FotografijaID");

                    b.ToTable("Fotografi");
                });

            modelBuilder.Entity("Data.EFModels.Fotografija", b =>
                {
                    b.Property<int>("FotografijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivStilaFotografije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FotografijaID");

                    b.ToTable("Fotografije");
                });

            modelBuilder.Entity("Data.EFModels.Konobar", b =>
                {
                    b.Property<int>("KonobarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImeKonobara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PlataKonobara")
                        .HasColumnType("real");

                    b.Property<string>("PrezimeKonobara")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KonobarID");

                    b.ToTable("Konobari");
                });

            modelBuilder.Entity("Data.EFModels.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdresaStanovanja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImeKorisnika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrezimeKorisnika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolaID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RolaID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.EFModels.KreditnaKartica", b =>
                {
                    b.Property<int>("KreditnaKarticaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojKreditneKartice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaIstekaKartice")
                        .HasColumnType("int");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MjesecIstekaKartice")
                        .HasColumnType("int");

                    b.HasKey("KreditnaKarticaID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("KreditnaKartica");
                });

            modelBuilder.Entity("Data.EFModels.Kuhar", b =>
                {
                    b.Property<int>("KuharID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImeKuhara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PlataKuhara")
                        .HasColumnType("real");

                    b.Property<string>("PrezimeKuhara")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KuharID");

                    b.ToTable("Kuhari");
                });

            modelBuilder.Entity("Data.EFModels.KuharMeni", b =>
                {
                    b.Property<int>("MeniID")
                        .HasColumnType("int");

                    b.Property<int>("KuharID")
                        .HasColumnType("int");

                    b.HasKey("MeniID", "KuharID");

                    b.HasIndex("KuharID");

                    b.ToTable("KuharMeni");
                });

            modelBuilder.Entity("Data.EFModels.Meni", b =>
                {
                    b.Property<int>("MeniID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaMenija")
                        .HasColumnType("real");

                    b.Property<bool>("IzSkladista")
                        .HasColumnType("bit");

                    b.Property<string>("NazivMenija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeMenija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipMenijaID")
                        .HasColumnType("int");

                    b.HasKey("MeniID");

                    b.HasIndex("TipMenijaID");

                    b.ToTable("Meniji");
                });

            modelBuilder.Entity("Data.EFModels.Muzika", b =>
                {
                    b.Property<int>("MuzikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivZanra")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MuzikaID");

                    b.ToTable("Muzika");
                });

            modelBuilder.Entity("Data.EFModels.MuzikaBend", b =>
                {
                    b.Property<int>("MuzikaBendID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BendID")
                        .HasColumnType("int");

                    b.Property<int>("MuzikaID")
                        .HasColumnType("int");

                    b.HasKey("MuzikaBendID");

                    b.HasIndex("BendID");

                    b.HasIndex("MuzikaID");

                    b.ToTable("MuzikaBendovi");
                });

            modelBuilder.Entity("Data.EFModels.NacinPlacanja", b =>
                {
                    b.Property<int>("NacinPlacanjaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NacinPlacanjaNaziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NacinPlacanjaID");

                    b.ToTable("NacinPlacanja");
                });

            modelBuilder.Entity("Data.EFModels.Pozivnica", b =>
                {
                    b.Property<int>("PozivnicaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaPozivnice")
                        .HasColumnType("real");

                    b.Property<string>("OpisPozivnice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikePozivnice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PozivnicaID");

                    b.ToTable("Pozivnice");
                });

            modelBuilder.Entity("Data.EFModels.Racun", b =>
                {
                    b.Property<int>("RacunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("IznosRacuna")
                        .HasColumnType("real");

                    b.Property<int?>("KreditnaKarticaID")
                        .HasColumnType("int");

                    b.HasKey("RacunID");

                    b.HasIndex("KreditnaKarticaID");

                    b.ToTable("Racuni");
                });

            modelBuilder.Entity("Data.EFModels.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BendID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumVjencanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KolicinaPozivnica")
                        .HasColumnType("int");

                    b.Property<int?>("NacinPlacanjaID")
                        .HasColumnType("int");

                    b.Property<int?>("PozivnicaID")
                        .HasColumnType("int");

                    b.Property<int?>("RacunID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusRezervacijeID")
                        .HasColumnType("int");

                    b.Property<float>("VremenskoTrajanjeVjencanja")
                        .HasColumnType("real");

                    b.HasKey("RezervacijaID");

                    b.HasIndex("BendID");

                    b.HasIndex("NacinPlacanjaID");

                    b.HasIndex("PozivnicaID");

                    b.HasIndex("RacunID");

                    b.HasIndex("StatusRezervacijeID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaCvijece", b =>
                {
                    b.Property<int>("CvijeceID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("KolicinaNarucenogCvijeca")
                        .HasColumnType("int");

                    b.HasKey("CvijeceID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaCvijece");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaDekoracija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("DekoracijaID")
                        .HasColumnType("int");

                    b.Property<int>("KolicinaNarucenihDekoracija")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID", "DekoracijaID");

                    b.HasIndex("DekoracijaID");

                    b.ToTable("RezervacijaDekoracije");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaFotograf", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("FotografID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID", "FotografID");

                    b.HasIndex("FotografID");

                    b.ToTable("RezervacijaFotografi");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaKorisnik", b =>
                {
                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.HasKey("KorisnikID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaKorisnici");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSala", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID", "SalaID");

                    b.HasIndex("SalaID");

                    b.ToTable("RezervacijaSale");
                });

            modelBuilder.Entity("Data.EFModels.Rola", b =>
                {
                    b.Property<int>("RolaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolaID");

                    b.ToTable("Rola");
                });

            modelBuilder.Entity("Data.EFModels.Sala", b =>
                {
                    b.Property<int>("SalaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaIznajmljivanjaSale")
                        .HasColumnType("real");

                    b.Property<int>("KapacitetSale")
                        .HasColumnType("int");

                    b.Property<string>("NazivSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeSale")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalaID");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Data.EFModels.SalaKonobar", b =>
                {
                    b.Property<int>("SalaKonobarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KonobarID")
                        .HasColumnType("int");

                    b.Property<int>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("SalaKonobarID");

                    b.HasIndex("KonobarID");

                    b.HasIndex("SalaID");

                    b.ToTable("SalaKonobari");
                });

            modelBuilder.Entity("Data.EFModels.StatusRezervacije", b =>
                {
                    b.Property<int>("StatusRezervacijeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusRezervacijeID");

                    b.ToTable("StatusRezervacije");
                });

            modelBuilder.Entity("Data.EFModels.Stavka", b =>
                {
                    b.Property<int>("StavkaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KolicinaNarucenog")
                        .HasColumnType("int");

                    b.Property<int>("MeniID")
                        .HasColumnType("int");

                    b.Property<int>("StavkaUlazID")
                        .HasColumnType("int");

                    b.HasKey("StavkaID");

                    b.HasIndex("MeniID");

                    b.HasIndex("StavkaUlazID");

                    b.ToTable("Stavke");
                });

            modelBuilder.Entity("Data.EFModels.StavkaUlaz", b =>
                {
                    b.Property<int>("StavkaUlazID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.HasKey("StavkaUlazID");

                    b.ToTable("StavkaUlaz");
                });

            modelBuilder.Entity("Data.EFModels.Sto", b =>
                {
                    b.Property<int>("StoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KapacitetStola")
                        .HasColumnType("int");

                    b.Property<string>("OpisStola")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("StoID");

                    b.HasIndex("SalaID");

                    b.ToTable("Stolovi");
                });

            modelBuilder.Entity("Data.EFModels.TipCvijeca", b =>
                {
                    b.Property<int>("TipCvijecaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaCvijeca")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipCvijecaID");

                    b.ToTable("TipCvijeca");
                });

            modelBuilder.Entity("Data.EFModels.TipDekoracije", b =>
                {
                    b.Property<int>("TipDekoracijeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaDekoracije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipDekoracijeID");

                    b.ToTable("TipDekoracija");
                });

            modelBuilder.Entity("Data.EFModels.TipMenija", b =>
                {
                    b.Property<int>("TipMenijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaMenija")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipMenijaID");

                    b.ToTable("TipMenija");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.EFModels.Cvijece", b =>
                {
                    b.HasOne("Data.EFModels.TipCvijeca", "TipCvijeca")
                        .WithMany()
                        .HasForeignKey("TipCvijecaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Dekoracija", b =>
                {
                    b.HasOne("Data.EFModels.TipDekoracije", "TipDekoracije")
                        .WithMany()
                        .HasForeignKey("TipDekoracijeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Evidencija", b =>
                {
                    b.HasOne("Data.EFModels.Meni", "Meni")
                        .WithMany()
                        .HasForeignKey("MeniID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Fotograf", b =>
                {
                    b.HasOne("Data.EFModels.Fotografija", "Fotografija")
                        .WithMany()
                        .HasForeignKey("FotografijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Korisnik", b =>
                {
                    b.HasOne("Data.EFModels.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.KreditnaKartica", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID");
                });

            modelBuilder.Entity("Data.EFModels.KuharMeni", b =>
                {
                    b.HasOne("Data.EFModels.Kuhar", "Kuhar")
                        .WithMany()
                        .HasForeignKey("KuharID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Meni", "Meni")
                        .WithMany()
                        .HasForeignKey("MeniID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Meni", b =>
                {
                    b.HasOne("Data.EFModels.TipMenija", "TipMenija")
                        .WithMany()
                        .HasForeignKey("TipMenijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.MuzikaBend", b =>
                {
                    b.HasOne("Data.EFModels.Bend", "Bend")
                        .WithMany()
                        .HasForeignKey("BendID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Muzika", "Muzika")
                        .WithMany()
                        .HasForeignKey("MuzikaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Racun", b =>
                {
                    b.HasOne("Data.EFModels.KreditnaKartica", "KreditnaKartica")
                        .WithMany()
                        .HasForeignKey("KreditnaKarticaID");
                });

            modelBuilder.Entity("Data.EFModels.Rezervacija", b =>
                {
                    b.HasOne("Data.EFModels.Bend", "Bend")
                        .WithMany()
                        .HasForeignKey("BendID");

                    b.HasOne("Data.EFModels.NacinPlacanja", "NacinPlacanja")
                        .WithMany()
                        .HasForeignKey("NacinPlacanjaID");

                    b.HasOne("Data.EFModels.Pozivnica", "Pozivnica")
                        .WithMany()
                        .HasForeignKey("PozivnicaID");

                    b.HasOne("Data.EFModels.Racun", "Racun")
                        .WithMany()
                        .HasForeignKey("RacunID");

                    b.HasOne("Data.EFModels.StatusRezervacije", "StatusRezervacije")
                        .WithMany()
                        .HasForeignKey("StatusRezervacijeID");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaCvijece", b =>
                {
                    b.HasOne("Data.EFModels.Cvijece", "Cvijece")
                        .WithMany()
                        .HasForeignKey("CvijeceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaDekoracija", b =>
                {
                    b.HasOne("Data.EFModels.Dekoracija", "Dekoracija")
                        .WithMany()
                        .HasForeignKey("DekoracijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaFotograf", b =>
                {
                    b.HasOne("Data.EFModels.Fotograf", "Fotograf")
                        .WithMany()
                        .HasForeignKey("FotografID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaKorisnik", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSala", b =>
                {
                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.SalaKonobar", b =>
                {
                    b.HasOne("Data.EFModels.Konobar", "Konobar")
                        .WithMany()
                        .HasForeignKey("KonobarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Stavka", b =>
                {
                    b.HasOne("Data.EFModels.Meni", "Meni")
                        .WithMany()
                        .HasForeignKey("MeniID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.StavkaUlaz", "StavkaUlaz")
                        .WithMany("StavkeRacuna")
                        .HasForeignKey("StavkaUlazID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Sto", b =>
                {
                    b.HasOne("Data.EFModels.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
